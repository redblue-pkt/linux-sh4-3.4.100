		Implementation notes on the 'stm-nand-bch' driver
		=================================================


 1. NANDi Controller
    ----------------

    The NANDi Controller actually comprises two separate NAND controllers: the
    Hamming Controller, and the newer BCH Controller.  The BCH controller is
    intended to perform large data transfers with minimal CPU overhead.
    However, it lacks some of the fine-grain control required to perform certain
    operations (e.g. query the 'READID').  As a result, the stm-nand-bch driver
    must, on occasion, fall-back to Hamming-FLEX mode.  Broadly speaking, the
    driver prefixes functions as follows:

	     bch_	- BCH operations
	     flex_	- Hamming-FLEX mode operations
	     nandi_	- Wraps BCH and FLEX functions
	     nand_	- Generic NAND operations, not tied to the H/W

    It should be noted that both controllers share the same register space, with
    accesses routed to either the Hamming Controller or the BCH Controller, as
    determined by a bit-field in the EMISS configuration register.

    Both controllers also use the same EMI pads. However, there is no provision
    in hardware to arbitrate between the two controllers, and software must take
    care to avoid any contention.  This is achieved in the stm-nand-bch driver
    by ensuring all transactions on one controller are completed before
    switching to the other.

    Finally, both controllers drive the same interrupt signal.  Strictly
    speaking, the interrupt handler should query the interrupt status register
    of both controllers in order to determine the source, and to clear the
    correct interrupt.  However, in practice, Hamming and FLEX operations are
    never interleaved (see paragraph above), and there is no overlap in the
    interrupt types used by Hamming-FLEX or BCH operations in the stm-nand-bch
    driver.  For example, a 'RBn' interrupt is only enabled for Hamming-FLEX
    operations and as such, the Hamming controller will be in scope when the
    interrupt needs to be serviced.


2. Supported Devices
   -----------------

    SLC NAND devices, requiring up to 18-bit/1K ECC with 32 bytes OOB/1K data;
    or up to 30-bit/1K ECC with 54 bytes OOB/1K data. [MLC NAND not supported]

    x8 data/control bus [No support for x16 devices, or 2x8 configuration]

    LP(2k), VLP(4k), and VVLP(8k) SLC NAND devices [SP(512) NAND not supported]

    Single-CS operation only [Multi-CS devices limited to single chip-select,
    and single data/control bus].

    Device detection using ONFI 'Parameter Page', falling-back to decoding
    READID and/or static table for legacy devices.  [Non-standard devices may
    not be identified correctly.]

    No client-access to OOB area - no support for YAFFS2, and JFFS2 only
    possibly via UBI.


3. Device Geometry
   ---------------

    The following terminology is adopted for describing the device geometry:

           --------------------------------------------------------------
           |   Device (Package)                                         |
           |                                                            |
           |    ----------------------------------------------------    |
           |    | Chip 0 (Target 0)                                |    |
    CE0# --|--->|                                                  |    |
           |    |  ---------------------    ---------------------  |    |
           |    |  | LUN 0 (Die 0)     |    | LUN 1 (Die 1)     |  |    |
           |    |  |         |         |    |         |         |  |    |
           |    |  |         |         |    |         |         |  |    |
           |    |  | Plane 0 | Plane 1 |    | Plane 0 | Plane 1 |  |    |
           |    |  ---------------------    ---------------------  |    |
           |    |                                                  |    |
           |    ----------------------------------------------------    |
           |                                                            |
           |    ----------------------------------------------------    |
           |    | Chip 1 (Target 1)                                |    |
    CE1# --|--->|                                                  |    |
           |    |  ---------------------    ---------------------  |    |
           |    |  | LUN 0 (Die 0)     |    | LUN 1 (Die 1)     |  |    |
           |    |  |         |         |    |         |         |  |    |
           |    |  |         |         |    |         |         |  |    |
           |    |  | Plane 0 | Plane 1 |    | Plane 0 | Plane 1 |  |    |
           |    |  ---------------------    ---------------------  |    |
           |    |                                                  |    |
           |    ----------------------------------------------------    |
           |                                                            |
           --------------------------------------------------------------


4. Erased Page ECC Errors
   ----------------------

    Due to the choice of BCH ECC format, reading an erased paged will cause the
    controller to return an 'uncorrectable' ECC error.  We must therefore
    distinguish between a genuine uncorrectable ECC error and an erased page.

    The most robust approach would be to use Hamming-FLEX to re-read the entire
    raw page+OOB data.  However, it is assumed that just checking the returned
    'raw' page data offers an acceptable compromise with minimal impact on
    performance.  (Is is possible to get a genuine uncorrectable ECC error where
    the page data is all 0xff?)

    Furthermore, for some recent devices, it is deemed within spec for a number
    of bits to be stuck at '0' (or drift to '0') in an erased page.  The specs
    are rather vague as to what is regarded as an acceptable number.  A sensible
    approach might be to link the number of '0' bits to the error rate of the
    device and/or the ECC capabilities.  However, this information is rarely
    available.  Erring on the side of caution, we have chosen to tolerate a
    single '0' bit per BCH sector.


5. ECC Stats
   ---------

    When reading BCH ECC page data, the 'ECC_SCORE' instruction is used to
    report the maximum number of errors for any sector in the page.  However,
    MTD expects the total errors per page.  We have chosen to live with this
    apparent inconsistency, given 1) the likely hit on performance in detecting
    the real page total (would require multiple sequences per page, and
    therefore no double buffering on ECC computations); 2) the fact that the
    18-bit ECC offers better robustness than that required by currently
    available SLC devices; and 3) the lack of compelling evidence that MTD
    clients actually do anything sensible with the ECC count.


6. Multi-CS NAND Devices
   ---------------------

    There is currently no support for Multi-CS NAND devices, or rather, support
    is limited to a single 'EMI' chip-select of the device.  While Hamming-AFM
    and BCH both include a set of instructions to facilitate the use of Multi-CS
    NAND devices, this is achieved via an additional set of signals,
    nand_cs[1-3].  An important point to note here is that Hamming-FLEX mode has
    can only drive the EMI chip-selects, emi_cs[0-5], and has no access to the
    nand_cs[1-3] signals.

    It was the intention that within SoC integration these additional signals be
    routed/muxed with the emi_cs[1-3] signals.  This would allow Hamming-FLEX
    and Hamming/BCH-AFM to drive the same set of chip-selects.  With regards to
    the stx7108, it is possible to route nand_cs[1-3] to emi_cs[1-3] (or indeed
    any other mapping) via SYSCFG registers.  However, the nand_cs[1-3] signals
    are also bristled out of the SoC directly.  It seems that existing board
    designs that include multi-CS NAND devices have opted to use the
    nand_cs[1-3] signals rather than the emi_cs[1-3] signals.  As a result, it
    is not possible for Hamming-FLEX to drive the additional chip-selects.

    Of particular relevance here is that the current BCH driver falls back to
    Hamming-FLEX for certain operations.  While it would be possible to
    implement at least some of these operations in BCH-AFM (and perhaps all the
    essential operations), there would be some impact on performance.  Since it
    is expected that future platforms will follow the intended routing, based on
    the EMI chip-selects, the decision was made to not support the current set
    of 'rogue' platforms, and only add Multi-CS support as and when a suitable
    test platform becomes available.

    One final point to note is that the hardware is only intended to support
    Multi-CS devices that share a single data/control bus.  Devices with dual
    data/control buses will be limited to single data/control bus operations.


7. Bad-block Markers (BBMs) and Bad-block Tables (BBTs)
   ----------------------------------------------------

    The BCH Controller writes data to the same location as that used for the
    factory-programmed bad-block markers.  This causes the potential for
    BCH-programmed data to be misinterpreted as a bad-block marker.

    Ideally, we would mandate the use of a Flash-resident bad-block table, with
    an initial scan of the factory-programmed markers before any data has been
    written to the NAND device.

    While nand_bbt.c provides some generic support for BBTs, is not ideally
    suited to the particular characteristics of the BCH Controller:

    1. Firstly, the BBT signature is located in the OOB area, whereas the BCH
       controller assumes it has exclusive use of the OOB area.

    2. Another problem arises from the use of certain functions in nand_base.c
       which in turn call the low-level 'chip' routines (e.g. cmd_func(),
       read_byte()).  The BCH Controller was intended to operate at a higher
       level of abstraction (e.g. read_page()) and while it is possible to
       'fake' support for some of the chip routines, it all gets rather messy.
       (For example, stm_nand_afm.c assumes the only caller of chip->read_byte()
       is nand_check_wp(), and can therefore get away with just returning the
       last received status byte, rather than actually reading a byte).

    3. Finally, experience suggests it is unwise to assume that there is either
       a correctly written BBT or the device is unprogrammed, with unambiguous
       bad-block markers.  This problem was addressed for the Hamming AFM ECC
       and Hamming boot-mode ECC by adding markers to the ECC pattern ('AFM' and
       'B', respectively).  It was then relatively easy to update nand_bbt.c to
       use these markers to distinguish between ECC data and genuine bad-block
       markers.

       However, this approach is not available for the BCH controller, since we
       must cater for devices with no free OOB space.  One option might be the
       following heuristic:

	   scan each block for bad-block marker
             if potential bad-block marker is found
                 re-read page(s) with BCH ECC enabled
                     if uncorrectable ECC errors
                         block is bad
                     else
                         block is good
             else
                 block is good

       This approach would be rather difficult to add to nand_bbt.c
       (although not impossible...)

    With this in mind, it was decided to re-implement BBT support for the BCH
    controller, albeit heavily based on nand_bbt.c.  (We may revisit this
    decision, especially in light of updates to linux mainline which now include
    support for in-band BBT signatures.)


8. MTD 'OOB' Operations
   --------------------

    The design of the BCH controller assumes a class of NAND device where the
    entire OOB (SPARE) area is required for ECC data.  As a result, the OOB area
    is not available for use by clients (e.g. cleanmarker node on JFFS2, or
    filesystem meta-data on YAFFS2).  This fact is advertised to the MTD
    subsystem by setting the MTD parameter 'oobavail' to zero (although MTD
    clients may not necessarily query or obey this parameter correctly).

    Rather than follow the conventional approach of storing sectors of data in
    the PAGE area, with corresponding sectors of ECC bytes in the OOB area, the
    BCH controller makes no distinction between the PAGE and OOB area, with each
    data sector immediately followed by the ECC data:

    MTD layout:		[data0:data1:data2:data3 | ecc0:ecc1:ecc2:ecc3]

    BCH layout:		[data0:ecc0:data1:ecc1:data2:ecc2:data3:ecc3]

    Although the BCH controller does not allow the use of the OOB area, the
    driver makes some attempt to support the MTD routines mtd_read_oob() and
    mtd_write_oob().  This is mainly for testing and debugging purposes, but
    also allows 'RAW' read/write operations to be performed.  In order to
    maintain some consistency with existing tools, the driver implements a
    mapping between the conventional layout and the BCH layout.  That is, for
    READ operations, the page data is returned in a single contiguous buffer,
    with ECC bytes in a separate buffer.  For WRITE operations, the PAGE and OOB
    data is interleaved, in multiple sectors, before being written to the NAND
    device.

    (Note, if in the future we attempt to make use of the new 'in-band' BBT
    found in linux mainline, we will need to revert the OOB operations to act on
    the real OOB area.)
